#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass lyx
\use_default_options true
\begin_modules
theorems-ams
theorems-chap
multicol
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Cover

\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Title
Entorno de Programación
\end_layout

\begin_layout Author
Tecnicatura Universitaria en Inteligencia Artificial
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Date
19 de marzo de 2023.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Part
Fundamentos
\end_layout

\begin_layout Chapter
Historia
\end_layout

\begin_layout Section
Orígenes de la computadora
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename pascal.jpg
	display false
	scale 8

\end_inset


\end_layout

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Blaise_Pascal"
literal "true"

\end_inset

 
\emph on
Blaise Pascal
\emph default
 había desarrollado en 1642 una de las primeras calculadoras mecánicas de
 la historia, conocida como la 
\begin_inset Quotes fld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=3h71HAJWnVU"
literal "true"

\end_inset

 Pascalina
\begin_inset Quotes frd
\end_inset

.
 Esta máquina, capaz de realizar operaciones aritméticas básicas mediante
 el uso de engranajes y ruedas dentadas, fue un importante avance en el
 campo de la mecánica y la automatización, y sentó las bases para el desarrollo
 de las máquinas calculadoras modernas.
 La Pascalina fue utilizada por matemáticos y científicos de la época, y
 su diseño influyó en el desarrollo de posteriores calculadoras mecánicas.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pascalina.png
	lyxscale 17
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Pascalina
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\begin_inset Quotes fld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=BlbQsKpq3Ak"
literal "true"

\end_inset

 máquina analítica
\begin_inset Quotes frd
\end_inset

 fue un proyecto desarrollado por 
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename babbage.jpg
	display false
	scale 14

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Charles_Babbage"
literal "true"

\end_inset

 Charles Babbage en 1837, considerado como el primer prototipo de una computador
a moderna.
 Babbage, matemático, filósofo e inventor inglés, diseñó una máquina capaz
 de realizar cálculos automáticamente mediante el uso de engranajes y ruedas
 dentadas, similar a la Pascalina de Blaise Pascal pero con un alcance mucho
 mayor.
 La máquina analítica tenía la capacidad de almacenar programas y realizar
 operaciones matemáticas complejas, y se considera el primer ejemplo de
 un sistema de procesamiento de datos automático.
 Aunque Babbage nunca logró construir la máquina completa debido a problemas
 financieros y técnicos, su proyecto sentó las bases para el desarrollo
 de las computadoras modernas y tuvo un gran impacto en el campo de la informáti
ca y la automatización.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diferencial.jpg
	lyxscale 15
	scale 9

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Máquina diferencial
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=2XLZ4Z8LpEE"
literal "true"

\end_inset

 teletipo fue una invención que permitió la transmisión automática de texto
 a través de una red telegráfica.
 Fue inventado a finales del sigo XIX, y su desarrollo permitió una comunicación
 más rápida y eficiente que el telégrafo de 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Samuel_Morse"
literal "true"

\end_inset

 Samuel Morse.
 El teletipo utilizaba un sistema de impresión automática para recibir y
 transmitir texto, lo que permitió una comunicación más precisa y legible.
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
Las terminales de teletipo (TTY) también se utilizaron como terminales de
 computadoras en las primeras décadas de la historia de las computadoras.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename teletipo.png
	lyxscale 20
	scale 12

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Teletipo Siemens t37h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Avances de la guerra
\end_layout

\begin_layout Standard
El comienzo de la Segunda Guerra Mundial en 1939 motivó un gran avance en
 la computación debido a la necesidad de procesar grandes cantidades de
 datos y realizar cálculos complejos para apoyar los esfuerzos de la guerra.
\end_layout

\begin_layout Standard
El ordenador 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=aUXnhVrT4CI"
literal "true"

\end_inset

 Z3
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename zuse.jpg
	display false
	scale 15

\end_inset


\end_layout

\end_inset

es una máquina de computación construida en 1941 por 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Konrad_Zuse"
literal "true"

\end_inset

 
\emph on
Konrad Zuse
\emph default
, un ingeniero y matemático alemán.
 Era una máquina electromecánica basada en relés, que utilizaba un sistema
 binario para representar los datos y los cálculos.
 El Z3 contaba con una memoria programable, lo que permitía al usuario programar
 la máquina para llevar a cabo diferentes tareas.
 Fue destruido en 1943 durante un bombardeo en Berlín.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename z3.png
	lyxscale 15
	scale 17

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Réplica del Zuse Z3 exhibida en Múnich
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=bN7AdQmd8So"
literal "true"

\end_inset

 Harvard Mark I
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename aiken.jpg
	display false
	scale 45

\end_inset


\end_layout

\end_inset

 es una computadora electromecánica construida en 1944 por IBM y patrocinada
 por el gobierno de los Estados Unidos.
 Fue diseñada por el matemático 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Howard_Aiken"
literal "true"

\end_inset

 
\emph on
Howard Aiken
\emph default
 y se encuentra en el Museo de la historia de la computación en la Universidad
 de Harvard.
 La Harvard Mark I fue una máquina de gran tamaño, medía 8 metros de largo,
 2 metros de alto y 2 metros de ancho, y utilizaba relés electromecánicos
 para llevar a cabo cálculos.
 La máquina era capaz de realizar aritmética básica y funcionaba con un
 sistema de tarjetas perforadas.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename mark1.png
	lyxscale 35
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Harvard Mark I
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=32o4qcYbWMA"
literal "true"

\end_inset

 ENIAC (Electronic Numerical Integrator And Computer) fue una computadora
 electrónica programable construida por el gobierno de los Estados Unidos
 en 1946.
 Era una máquina enorme, medía 30 metros de largo, 2 metros de alto y 3
 metros de ancho, y pesaba 27 toneladas.
 Utilizaba tecnología de válvulas electrónicas y era capaz de realizar cálculos
 numéricos complejos a alta velocidad.
 Fue utilizada para calcular los resultados de las explosiones nucleares
 y para resolver problemas científicos y técnicos en la industria.
 Fue inicialmente diseñada para calcular tablas de tiro de artillería destinadas
 al Laboratorio de Investigación Balística del Ejército de los Estados Unidos.
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
Aunque la tecnología de válvulas era superior a la de relés, no fue hasta
 la invención del transistor en 1947 que las computadoras ganaron su verdadero
 poder de computo.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename eniac.png
	lyxscale 25
	scale 22

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Electronic Numerical Integrator And Computer
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
La informática moderna
\end_layout

\begin_layout Standard
En la década de 1950, las computadoras eran enormes máquinas electromecánicas
 y electrónicas que ocupaban grandes espacios y requerían un equipo especializad
o para operarlas.
 Estas máquinas eran principalmente utilizadas para tareas de cálculo y
 procesamiento de datos, como la contabilidad y la investigación científica,
 y eran utilizadas principalmente por grandes empresas, organizaciones gubername
ntales y universidades.
 A pesar de su tamaño y complejidad, estas computadoras marcaron el comienzo
 de la era informática moderna y sentaron las bases para el desarrollo de
 las computadoras personales y de escritorio de las décadas siguientes.
\end_layout

\begin_layout Standard
FORTRAN
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename backus.jpg
	display false
	scale 18

\end_inset


\end_layout

\end_inset

 (Formula Translation) es uno de los primeros lenguajes de programación
 de computadora.
 Fue desarrollado en 1957 por un equipo de ingenieros de IBM liderado por
 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/John_Backus"
literal "true"

\end_inset

 
\emph on
John Backus
\emph default
.
 El objetivo de FORTRAN era proporcionar un lenguaje de programación que
 permitiese a los científicos y matemáticos escribir programas de manera
 eficiente y fácilmente para ser utilizado en las computadoras de ese entonces.
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=1EWQYAfuMYw"
literal "true"

\end_inset

 PDP-1 (Programmed Data Processor-1) es un ordenador construido por la compañía
 Digital Equipment Corporation (DEC) en 1959.
 Fue el primer ordenador de la serie PDP y uno de los primeros de tipo minicompu
tadora.
 El PDP-1 fue un ordenador de tiempo compartido, lo que significa que varios
 usuarios podían acceder al sistema al mismo tiempo y compartir los recursos
 del ordenador.
 Esto fue un gran avance en comparación con los ordenadores anteriores,
 que solían ser utilizados por un solo usuario a la vez.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pdp1.jpg
	lyxscale 15
	scale 23

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Programmed Data Processor-1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
BASIC (Beginners All-Purpose Symbolic Instruction Code) es un lenguaje de
 programación creado en el verano de 1964, con el objetivo de desarrollar
 un lenguaje de programación fácil de aprender y usar para estudiantes no
 especialistas y principiantes en la programación.
 El lenguaje se basó en el lenguaje FORTRAN, pero con un enfoque en la simplicid
ad y la facilidad de uso.
\end_layout

\begin_layout Standard
El sistema 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=JQ8ZiT1sn88"
literal "true"

\end_inset

 NLS
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename engelbart.jpg
	display false
	scale 65

\end_inset


\end_layout

\end_inset

 (oN-Line System) fue un sistema de información desarrollado por 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Douglas_Engelbart"
literal "true"

\end_inset

 
\emph on
Douglas Engelbart
\emph default
 y su equipo en 1968.
 Fue una de las primeras demostraciones de una interfaz gráfica de usuario
 (GUI), con un puntero del ratón sistema de hipertexto y ventanas.
 También introdujo varias características que se consideran fundamentales
 en la computación moderna, como el procesamiento de textos, el correo electróni
co, la videoconferencia y la colaboración en tiempo real.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename nls.png
	lyxscale 40
	scale 52

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
NLS (oN-Line System)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
MULTICS (Multiplexed Information and Computing Service) fue un sistema operativo
 desarrollado en 1969 por un equipo liderado por el MIT y Bell Labs.
 El objetivo de MULTICS era crear un sistema operativo de tiempo compartido
 que pudiera ser utilizado por varios usuarios simultáneamente y ofrecer
 servicios avanzados, como el procesamiento de archivos, el manejo de bases
 de datos y el procesamiento de informes.
 A pesar de sus avances, MULTICS tuvo problemas financieros y técnicos que
 retrasaron su desarrollo y limitaron su adopción.
 Aun así, muchas de las características y conceptos de MULTICS se convirtieron
 en estándar en la industria de los sistemas operativos modernos, como el
 manejo de permisos, el sistema de archivos y la seguridad.
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename thompsonritchie.jpg
	display false
	scale 40

\end_inset


\end_layout

\end_inset

Tras haber participado en el desarrollo de MULTICS, 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Ken_Thompson"
literal "true"

\end_inset

 
\emph on
Ken Thompson
\emph default
 y 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Dennis_Ritchie"
literal "true"

\end_inset

 
\emph on
Dennis Ritchie
\emph default
 iniciaron en 1970 la creación de un nuevo sistema operativo para la computadora
 DEC PDP-7.
 El proyecto fue bautizado originalmente como UNICS e inicialmente no tuvo
 apoyo económico por parte de los laboratorios Bell.
 Al año siguiente, Dennis Ritchie desarrolla el lenguaje de programación
 C, un sistema diseñado para ser eficiente en términos de tiempo de ejecución
 y uso de recursos, y fácil de portar a diferentes plataformas de hardware.
\end_layout

\begin_layout Standard
Los sistemas operativos existentes hasta el momento eran propietarios y
 solo funcionaban en una plataforma específica, es por esto que en 1972,
 Ken Thompson y Dennis Ritchie decidieron reescribir el código de UNICS
 pero esta vez en lenguaje C, dando así origen a UNIX.
 Este cambio significaba que UNIX podría ser fácilmente modificado para
 funcionar en otras computadoras y así otras variaciones podían ser desarrollada
s por otros programadores.
 Ahora, el código era más conciso y compacto, lo que se tradujo en un aumento
 en la velocidad de desarrollo de UNIX.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset

En 1973 en el Xerox PARC (Palo Alto Research Center), se desarrolló el 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=9H79_kKzmFs"
literal "true"

\end_inset

 Xerox Alto: un ordenador de tipo personal, con una interfaz gráfica de
 usuario, soporte para ventanas y un mouse.
 Además, Alto también tenía un sistema de gestión de archivos, un procesador
 de texto, una herramienta de dibujo y soporte para redes de computadoras.
 Aunque el Xerox Alto nunca fue comercializado, muchas de sus características
 y conceptos se convirtieron en estándar en la industria de los ordenadores
 personales.
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename alto.png
	lyxscale 10
	scale 19

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Xerox Alto
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Primeras computadoras personales
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=qv5b1Xowxdk"
literal "true"

\end_inset

 Altair 8800 fue una de las primeras computadoras personales en ser comercializa
das, lanzada en 1974.
 Fue un gran éxito de ventas y sentó las bases para el desarrollo de las
 computadoras personales que conocemos hoy en día.
 La Altair 8800 se vendía en kit y los usuarios debían armarla ellos mismos.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename altair8800.png
	lyxscale 20
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Altair 8800
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En los primeros años del sistema Unix los Laboratorios Bell autorizaron
 a laas universidades, a utilizar el código fuente y adaptarlo a sus necesidades.
 A partir de dicha iniciativa, en 1977 nace en la universidad de Berkley
 el sistema operativo BSD (Berkeley Software Distribution).
 Sus principales contribuciones fueron la implementación de mejoras significativ
as en el sistema de archivos y en la red.
\end_layout

\begin_layout Standard
La IBM PC fue una de las computadoras más importantes en la historia de
 la informática, ya que sentó las bases para el estándar de computadora
 personal que se utiliza en la actualidad.
 Fue introducida por IBM en 1981 y se convirtió rápidamente en el estándar
 de la industria para las computadoras personales.
 Una de las características más importantes de la IBM PC fue su arquitectura
 abierta.
 A diferencia de otras computadoras personales de la época, la IBM PC tenía
 un diseño abierto que permitía a los usuarios y terceros desarrollar sus
 propios productos y programas para ella.
 Esto ayudó a impulsar un gran ecosistema de desarrolladores y fabricantes
 de periféricos que crearon una gran variedad de software y hardware para
 la computadora.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pc.jpg
	lyxscale 20
	scale 8

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
IBM PC
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
System V es una versión del sistema operativo UNIX desarrollado por Bell
 Labs en 1983.
 Fue una de las primeras versiones de UNIX en ser comercializada y distribuida
 ampliamente, y tuvo un gran impacto en el desarrollo de los sistemas operativos
 tipo UNIX.
 Aunque UNIX se convirtió en un estándar en la industria de la computación,
 no se consideraba 
\begin_inset Quotes fld
\end_inset

libre
\begin_inset Quotes frd
\end_inset

 debido a las restricciones en su uso y distribución impuestas por AT&T.
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename stallman.jpg
	display false
	scale 25

\end_inset


\end_layout

\end_inset

Ese mismo año fue fundado el movimiento GNU por 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Richard_Stallman"
literal "true"

\end_inset

 
\emph on
Richard Stallman
\emph default
, un programador y defensor de la libertad de software.
 El objetivo principal del movimiento GNU es desarrollar un sistema operativo
 completo y gratuito basado en el estándar UNIX, de manera que cualquier
 persona pueda usar, estudiar, compartir y modificar el software sin restriccion
es.
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
El movimiento de software privativo había sido fundado con anterioridad
 en 1976 por Bill Gates a través de la denominada 
\begin_inset Quotes fld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "\\faWikipediaW"
target "https://es.wikipedia.org/wiki/Carta_abierta_a_los_aficionados"
literal "true"

\end_inset

 carta abierta a los aficionados
\begin_inset Quotes frd
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
X Windows es un sistema de ventanas para sistemas tipo UNIX.
 Fue desarrollado en el Massachusetts Institute of Technology (MIT) en 1984.
 El objetivo principal de X Windows era proporcionar un sistema de ventanas
 que pudiera ser utilizado en una variedad de sistemas, permitiendo una
 interfaz gráfica de usuario (GUI).
\end_layout

\begin_layout Standard
Minix
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename tanenbaum.jpg
	display false
	scale 13

\end_inset


\end_layout

\end_inset

 fue un sistema operativo educativo desarrollado en el año 1987 por 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Andrew_S._Tanenbaum"
literal "true"

\end_inset

 
\emph on
Andrew S.
 Tanenbaum
\emph default
, para enseñar principios de diseño y funcionamiento de sistemas operativos
 a estudiantes universitarios.
 Originalmente diseñado para ser utilizado en computadoras IBM PC y compatibles,
 Minix tenía un diseño similar al de UNIX, pero con un conjunto reducido
 de herramientas y utilidades.
\end_layout

\begin_layout Standard
Mientras
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename linus.jpg
	display false
	scale 16

\end_inset


\end_layout

\end_inset

 estudiaba informática en la Universidad de Helsinki en 1991, 
\begin_inset CommandInset href
LatexCommand href
name "\\faUser"
target "https://es.wikipedia.org/wiki/Linus_Torvalds"
literal "true"

\end_inset

 
\emph on
Linus Torvalds
\emph default
 desarrolla un núcleo de sistema operativo como proyecto personal, basándose
 en el diseño de Minix.
 Hasta el momento el proyecto GNU había desarrollado una amplia gama de
 software, incluyendo un compilador, un intérprete de línea de comandos
 y diversas herramientas de programación.
 Sin embargo, faltaba un kernel, que es la parte del sistema operativo que
 administra los recursos del sistema, como la memoria y los procesos.
\end_layout

\begin_layout Standard
En resumen, Linux surgió como un proyecto personal de Linus Torvalds, pero
 con el tiempo se convirtió en una parte fundamental del proyecto GNU y
 en uno de los sistemas operativos de código abierto más utilizados y respetados
 de la industria tecnológica.
\end_layout

\begin_layout Chapter
Arquitectura de la computadora
\end_layout

\begin_layout Section
Gabinete 
\end_layout

\begin_layout Standard
El gabinete de la PC es una carcasa que cubre y protege los componentes
 de una computadora.
 Sus principales funciones son:
\end_layout

\begin_layout Description
Protección El gabinete protege los componentes de la computadora de daños
 físicos, polvo y otros factores ambientales que pueden dañarlos.
\end_layout

\begin_layout Description
Organización Los gabinetes de PC están diseñados para mantener todos los
 componentes en su lugar y organizados de manera eficiente.
 Esto hace que sea más fácil para el usuario trabajar en la computadora
 y realizar mejoras o reparaciones.
\end_layout

\begin_layout Description
Refrigeración: Los gabinetes de PC también ayudan a mantener los componentes
 frescos mediante la circulación de aire a través de la carcasa.
 Muchos gabinetes tienen ventiladores y otros sistemas de enfriamiento integrado
s para evitar el sobrecalentamiento de la computadora.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename gabinete.png
	lyxscale 20
	scale 18
	BoundingBox 100bp 100bp 900bp 900bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Gabinete Phobos Tg Xtech
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Placa madre
\end_layout

\begin_layout Standard
La placa madre es la pieza central de una computadora, encargada de conectar
 y comunicar todos los componentes esenciales del sistema.
 A través de sus conectores, la placa madre une la CPU, la memoria RAM,
 las unidades de almacenamiento, la tarjeta gráfica y otros dispositivos.
\end_layout

\begin_layout Standard
Además, la placa madre distribuye la energía eléctrica necesaria a todos
 los componentes a través de los conectores de alimentación, y controla
 los puertos de entrada/salida que permiten la comunicación de la computadora
 con dispositivos externos, como los puertos USB, de audio y de red.
\end_layout

\begin_layout Standard
La placa madre también incluye un chip de memoria ROM donde se almacena
 la BIOS, un programa que se encarga de configurar la computadora al encenderla
 y realizar pruebas iniciales del hardware.
\end_layout

\begin_layout Standard
La mayoría de las placas madre tienen un chip de audio integrado que proporciona
 capacidades de audio.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename motherboard.png
	lyxscale 20
	scale 25
	BoundingBox 0bp 0bp 1280bp 679bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Placa madre
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Fuente de alimentación
\end_layout

\begin_layout Standard
La PSU (Power Supply Unit) o fuente de alimentación se encarga de convertir
 la corriente eléctrica de la toma de corriente en la energía eléctrica
 necesaria para alimentar los componentes internos de la computadora.
\end_layout

\begin_layout Standard
Esta recibe la corriente eléctrica de la toma de corriente a través del
 cable de alimentación y la convierte en diferentes voltajes que son suministrad
os a los componentes de la computadora.
\end_layout

\begin_layout Standard
La PSU también protege los componentes de la computadora de sobretensiones,
 cortocircuitos y otros problemas eléctricos que pueden ocurrir.
 En caso de que se detecte una sobrecarga o falla, la PSU puede cortar el
 suministro de energía para proteger los componentes de la computadora.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename psu.jpg
	lyxscale 20
	scale 24

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Fuente de Alimentación
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Microprocesador
\end_layout

\begin_layout Standard
La CPU (Unidad Central de Procesamiento) es el componente principal de una
 computadora que realiza la mayoría de las operaciones de procesamiento
 de datos.
 Es un chip integrado que se coloca en el zócalo de la placa madre y está
 compuesto por varios núcleos (o cores) que trabajan en conjunto para ejecutar
 instrucciones y procesar datos.
\end_layout

\begin_layout Standard
La CPU es responsable de procesar y ejecutar los programas de software,
 manejar la entrada y salida de datos, y controlar los componentes del sistema,
 como la memoria RAM, el disco duro y las tarjetas de expansión.
 La velocidad y la capacidad de la CPU son factores clave que determinan
 el rendimiento general de una computadora.
\end_layout

\begin_layout Standard
Algunos procesadores modernos tienen gráficos integrados en su diseño.
 Estos gráficos integrados se denominan iGPU (unidad de procesamiento de
 gráficos integrados) y están diseñados para proporcionar capacidades gráficas
 básicas para aplicaciones informáticas y de juegos de baja exigencia.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cpu.jpg
	lyxscale 20
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Intel Core i9
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Memoria RAM
\end_layout

\begin_layout Standard
La memoria RAM (Random Access Memory o Memoria de Acceso Aleatorio) es un
 tipo de memoria que se utiliza en las computadoras para almacenar temporalmente
 los datos y programas que están en uso.
 La RAM es un componente clave en el rendimiento general de una computadora,
 ya que proporciona un acceso rápido y aleatorio a los datos y programas
 que el procesador necesita para operar.
\end_layout

\begin_layout Standard
Cuando una aplicación o un programa se ejecuta en la computadora, los datos
 y las instrucciones necesarios se cargan en la memoria RAM desde el disco
 duro.
 La RAM permite que el procesador acceda rápidamente a estos datos y programas,
 lo que acelera el tiempo de ejecución y la velocidad de la computadora
 en general.
\end_layout

\begin_layout Standard
Además, la memoria RAM es una memoria 
\emph on
volátil
\emph default
, lo que significa que pierde todos los datos almacenados en ella cuando
 se apaga la computadora.
 Por lo tanto, es importante guardar los archivos y datos importantes en
 el disco duro o en otro dispositivo de almacenamiento persistente.
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
Aunque el microprocesador también tiene una memoria volátil llamada 
\emph on
registros
\emph default
, estos son mucho mas caros y en consecuencia pequeños.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ram.jpg
	lyxscale 20
	scale 21
	BoundingBox 0bp 350bp 2000bp 1650bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Memoria RAM Corsair Vengance DDR4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Memoria secundaria
\end_layout

\begin_layout Standard
Un 
\begin_inset CommandInset href
LatexCommand href
name "\\faYoutubePlay"
target "https://www.youtube.com/watch?v=3owqvmMf6No"
literal "true"

\end_inset

 disco duro es un dispositivo de almacenamiento de datos magnético que se
 utiliza en las computadoras para almacenar permanentemente archivos y programas.
 A diferencia de la memoria RAM, que es una memoria volátil y pierde todos
 los datos almacenados en ella cuando la computadora se apaga, el disco
 duro mantiene los datos almacenados incluso después del apagado de la computado
ra.
\end_layout

\begin_layout Standard
Una de las principales diferencias entre el disco duro y la memoria RAM
 es la velocidad.
 La memoria RAM proporciona un acceso rápido y aleatorio a los datos y programas
, lo que permite al procesador acceder a ellos rápidamente.
 En comparación, los discos duros son mucho más lentos en términos de velocidad
 de acceso, ya que el brazo de lectura/escritura necesita moverse físicamente
 para acceder a los datos en los platos.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename disk.jpg
	lyxscale 20
	scale 10
	BoundingBox 0bp 100bp 1500bp 1400bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Disco rígido Seagate Barracuda 1TB
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset

Una SSD (Solid State Drive) es un dispositivo de almacenamiento de datos
 que utiliza memoria flash para almacenar permanentemente archivos y programas
 en la computadora.
 A diferencia de un disco duro tradicional, que utiliza platos magnéticos
 giratorios y cabezas de lectura/escritura para acceder a los datos, una
 SSD no tiene partes móviles y utiliza chips de memoria flash para almacenar
 y acceder a los datos.
\end_layout

\begin_layout Standard
La tecnología SSD es más rápida que la de un disco duro porque no hay partes
 mecánicas que necesiten moverse para acceder a los datos.
 En lugar de eso, los datos se almacenan en chips de memoria flash, que
 son mucho más rápidos para acceder y leer que los discos duros.
 Como resultado, las SSD proporcionan un mejor rendimiento en términos de
 velocidad de lectura/escritura y tiempo de acceso.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ssd.jpg
	lyxscale 20
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
SSD Kingston
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Placa de video
\end_layout

\begin_layout Standard
Una placa de video, también conocida como tarjeta gráfica, es un componente
 de hardware de la computadora que tiene como objetivo procesar y generar
 imágenes en la pantalla.
 Su función es liberar a la CPU (unidad central de procesamiento) de la
 computadora de la tarea de procesamiento gráfico, lo que permite que la
 CPU se concentre en otras tareas.
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
Además de su uso en gráficos, en el campo de la inteligencia artificial
 son comúnmente utilizadas para entrenar y ejecutar redes neuronales profundas.
 Esto se debe a que las placas de video tienen una arquitectura altamente
 paralela que les permite procesar grandes cantidades de datos de manera
 eficiente.
 Como resultado, las placas de video son ideales para el procesamiento masivo
 de datos que se requiere en la inteligencia artificial.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename gpu.jpg
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Tarjeta Gráfica NVIDIA RTX 2080 Ti
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Sistemas Operativos
\end_layout

\begin_layout Section
Proceso de arranque
\end_layout

\begin_layout Standard
Durante el arranque de una PC, ocurren varias cosas importantes que permiten
 que el sistema operativo se inicie correctamente y la computadora esté
 lista para su uso.
\end_layout

\begin_layout Standard
Al presionarse el botón de arranque se activa la fuente de alimentación
 de la computadora, la cual suministra la energía necesaria para que la
 placa madre comience a funcionar.
 A partir de aquí, comienza un proceso que consiste en varias etapas:
\end_layout

\begin_layout Description
POST
\begin_inset space ~
\end_inset

(Power
\begin_inset space ~
\end_inset

On
\begin_inset space ~
\end_inset

Self
\begin_inset space ~
\end_inset

Test) La placa madre realiza un autodiagnóstico para verificar que todos
 los componentes de hardware de la computadora estén funcionando correctamente.
 Si detecta algún problema, emitirá un mensaje de error y detendrá el proceso
 de arranque.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename post.jpg
	lyxscale 20
	scale 11

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Etapa de Autodiagnóstico
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Boot
\begin_inset space ~
\end_inset

Loader A continuación la placa madre debe cargar un programa llamado 
\begin_inset Quotes fld
\end_inset


\emph on
cargador de arranque
\emph default

\begin_inset Quotes frd
\end_inset

.
 El cargador de arranque es un programa cuyo objetivo principal es cargar
 el núcleo del sistema operativo.
 El cargador de arranque mas utilizado en linux es 
\begin_inset Quotes fld
\end_inset


\emph on

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\backslash
;
\end_layout

\end_inset

GRUB
\emph default

\begin_inset Quotes frd
\end_inset

; y 
\begin_inset Quotes fld
\end_inset


\emph on

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faWindows 
\backslash
;
\end_layout

\end_inset

bootmgr
\emph default

\begin_inset Quotes frd
\end_inset

 es el proporcionado por los sistemas modernos de Windows.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename grub.png
	lyxscale 40
	scale 22

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

GRUB
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bootmgr.png
	lyxscale 50
	scale 58

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faWindows 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

bootmgr
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Núcleo A continuación, el núcleo del sistema operativo toma el control de
 la computadora.
 Durante sus tareas iniciales se encargará de identificar el hardware disponible
, cargar los controladores necesarios y montar el sistema de archivos del
 sistema.
 Finalmente dará comienzo al primer programa de usuario, a partir del cual
 se ejecutaran todos los demás programas.
\end_layout

\begin_layout Description
Init En los sistemas Linux, el programa inicial del sistema operativo se
 llama 
\begin_inset Quotes fld
\end_inset


\emph on
init
\emph default

\begin_inset Quotes frd
\end_inset

.
 Init se encargará de cargar los scripts de arranque del sistema, así como
 también ejecutar los servicios esenciales para el funcionamiento del mismo,
 y proveer al usuario de un entorno gráfico o de linea de comandos.
\end_layout

\begin_layout Section
Descripción
\end_layout

\begin_layout Standard
Un sistema operativo es un conjunto de programas y herramientas que controlan
 y coordinan las actividades de una computadora o dispositivo electrónico,
 y permiten a los usuarios interactuar con el hardware y el software de
 manera sencilla y eficiente.
 Está compuesto por un núcleo (o 
\emph on
kernel
\emph default
) que tiene control completo sobre el hardware en el que corre, y una serie
 de programas utilitarios que se comunican con el.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename kernel.png
	lyxscale 30
	scale 14

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Comunicación entre aplicaciones, núcleo y hardware
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
Las funciones principales de un sistema operativo incluyen:
\end_layout

\begin_layout Itemize
Gestionar el hardware: El sistema operativo es responsable de gestionar
 el hardware de la computadora, como el procesador, la memoria, el disco
 duro, la tarjeta gráfica, entre otros.
 Controla cómo se utilizan estos recursos y asigna la cantidad adecuada
 de memoria y procesador a cada aplicación.
\end_layout

\begin_layout Itemize
Proporcionar una interfaz de usuario: El sistema operativo proporciona una
 interfaz de usuario que permite a los usuarios interactuar con el ordenador
 y ejecutar aplicaciones y programas.
\end_layout

\begin_layout Itemize
Gestionar los archivos y directorios: El sistema operativo se encarga de
 gestionar los archivos y directorios del ordenador, lo que permite a los
 usuarios crear, modificar, copiar y eliminar archivos y carpetas.
\end_layout

\begin_layout Standard
Entre las principales características de un sistema operativo se encuentran:
\end_layout

\begin_layout Itemize
Multitarea: Un sistema operativo permite que varias aplicaciones se ejecuten
 al mismo tiempo y asigna los recursos necesarios para que funcionen correctamen
te.
\end_layout

\begin_layout Itemize
Multiusuario: Un sistema operativo puede ser utilizado por varios usuarios
 al mismo tiempo y garantiza que cada usuario tenga sus propios archivos
 y configuraciones.
\end_layout

\begin_layout Itemize
Portabilidad: Los sistemas operativos pueden ser instalados en diferentes
 tipos de hardware, lo que los hace altamente portables.
\end_layout

\begin_layout Section
Núcleo
\end_layout

\begin_layout Standard
El 
\emph on
kernel
\emph default
 (o núcleo) de un sistema operativo es la parte central y más fundamental
 del mismo.
 Es responsable de controlar el acceso a los recursos del hardware, gestionar
 los procesos, la memoria y la entrada/salida, y proporcionar una interfaz
 para que las aplicaciones interactúen con el hardware del sistema.
\end_layout

\begin_layout Standard
Podemos consultar cual es el núcleo que se esta ejecutando con el comando:
\end_layout

\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

uname -r
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PowerShell
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={solarized-dark}"
inline false
status open

\begin_layout Plain Layout

[Environment]::OSVersion
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El núcleo se ejecuta en modo privilegiado, lo que significa que tiene acceso
 directo al hardware y puede ejecutar instrucciones que otros programas
 no pueden.
\end_layout

\begin_layout Standard
Para casi cualquier tarea las aplicaciones de usuario necesitan pedirle
 permiso al kernel, a través de una instrucción denominada 
\begin_inset Quotes fld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "\\faWikipediaW"
target "https://es.wikipedia.org/wiki/Llamada_al_sistema"
literal "true"

\end_inset


\emph on
 llamada a sistema
\emph default

\begin_inset Quotes frd
\end_inset

.
 Cuando se produce una llamada a sistema el CPU deja de ejecutar el programa,
 y comienza a ejecutar la funcionalidad del núcleo requerida, luego de la
 cual se continua con la ejecución del programa.
\end_layout

\begin_layout Section
Terminal
\end_layout

\begin_layout Standard
A menudo se utilizan términos como 
\begin_inset Quotes fld
\end_inset

terminal
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

consola virtual
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

emulador de terminal
\begin_inset Quotes frd
\end_inset

 o 
\begin_inset Quotes fld
\end_inset

intérprete de línea de comandos
\begin_inset Quotes frd
\end_inset

 de forma indistinta, lo que puede llevar a cierta confusión.
 A continuación, se explican las diferencias entre estos términos:
\end_layout

\begin_layout Description
Terminal Se refiere a el o los dispositivos físicos que se utilizan para
 interactuar con un ordenador mediante la entrada y salida de texto.
 En la actualidad está compuesta principalmente por el teclado y el monitor.
\end_layout

\begin_layout Description
Consola
\begin_inset space ~
\end_inset

virtual Es una aplicación implementada dentro del núcleo que provee acceso
 al sistema simulando una terminal de teletipo.
 En los sistemas tipo Unix se puede acceder a ellas presionando Ctrl + Alt
 + F1, Ctrl + Alt + F2, etc.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename vconsole.png
	lyxscale 50
	scale 62

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

Consola virtual en Ubuntu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Emulador
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

terminal Es un programa de usuario que permite interactuar con un sistema
 operativo a través de una ventana en un entorno gráfico.
 Los emuladores de terminal son comúnmente utilizados para acceder a sistemas
 remotos o para ejecutar aplicaciones de línea de comandos en sistemas operativo
s.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename qterminal.png
	lyxscale 50
	scale 31

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

Qterminal en Lubuntu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
Para saber que emulador de terminal se está utilizando se puede escribir
 el comando:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

echo $TERM
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Shell Tambiém llamado 
\begin_inset Quotes fld
\end_inset

interprete de linea de comandos
\begin_inset Quotes frd
\end_inset

, es un programa que permite a un usuario interactuar con el sistema operativo
 mediante la ejecución de comandos a través de una interfaz de línea de
 comandos.
\end_layout

\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
Para saber que interprete de linea de comandos se está utilizando se puede
 escribir el comando:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

echo $SHELL
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Interfaz gráfica
\end_layout

\begin_layout Standard
Una interfaz gráfica de usuario es una forma de interactuar con un programa
 o sistema operativo mediante el uso de elementos gráficos, como ventanas,
 iconos, botones y menús, en lugar de usar comandos de texto en una línea
 de comandos.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
A las interfaces de usuario gráficas las llamamos 
\begin_inset Quotes fld
\end_inset

GUI
\begin_inset Quotes frd
\end_inset

 por sus siglas en inglés 
\begin_inset Quotes fld
\end_inset


\emph on
Graphical User Interface
\emph default

\begin_inset Quotes frd
\end_inset

; en cambio a las interfaces de texto las llamamos 
\begin_inset Quotes fld
\end_inset

CLI
\begin_inset Quotes frd
\end_inset

 por las siglas 
\begin_inset Quotes fld
\end_inset


\emph on
Command Line Interface
\emph default

\begin_inset Quotes frd
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El entorno de escritorio, el sistema de ventanas, el servidor de pantalla
 y el gestor de ventanas son componentes importantes de un sistema operativo
 gráfico que trabajan juntos para proporcionar una interfaz de usuario intuitiva
 y fácil de usar.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename gui.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

Capas de una GUI
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
A continuación, se describen las funciones de cada uno de ellos:
\end_layout

\begin_layout Description
Entorno
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

escritorio Es un conjunto de aplicaciones, herramientas y utilidades que
 proporcionan una interfaz de usuario gráfica para un sistema operativo.
 El entorno de escritorio incluye menús, barras de herramientas, iconos,
 fondos de pantalla, gestores de archivos y otras herramientas que hacen
 que el uso del sistema operativo sea más fácil e intuitivo para el usuario.
 Algunos ejemplos de entornos de escritorio son GNOME, KDE, XFCE y LXDE.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ubuntu.png
	lyxscale 50
	scale 21

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

Unity en Ubuntu 22.10
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Sistema
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

ventanas Es un sistema que permite la creación y manipulación de ventanas
 de aplicaciones en la pantalla.
 El sistema de ventanas se encarga de administrar la posición, tamaño, aparienci
a y eventos de las ventanas en la pantalla.
 También se encarga de la gestión de los recursos gráficos, como el uso
 de la memoria, la gestión de la entrada y salida de datos, y el manejo
 de la interacción entre aplicaciones.
 Algunos ejemplos de sistemas de ventanas son X11 y Wayland.
\end_layout

\begin_layout Description
Servidor
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

pantalla Es un programa que se ejecuta en el sistema operativo y se encarga
 de controlar la pantalla, el teclado y el ratón del sistema.
 El servidor de pantalla recibe la entrada de teclado y ratón y la envía
 a las aplicaciones en ejecución en el sistema.
 También se encarga de mostrar la salida gráfica de las aplicaciones en
 la pantalla.
 El servidor de pantalla más utilizado en Linux es Xorg.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Description
Gestor
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

ventanas Es un programa que se ejecuta en el entorno de escritorio y que
 se encarga de administrar la apariencia y el comportamiento de las ventanas
 de las aplicaciones.
 El gestor de ventanas proporciona una variedad de características, como
 la decoración de ventanas, la administración de escritorios virtuales,
 la configuración de atajos de teclado, y la gestión de la colocación de
 ventanas en la pantalla.
 Algunos ejemplos de gestores de ventanas son Metacity, KWin, Compiz, Openbox
 y i3.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename i3.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

Gestor de ventanas i3
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Distribuciones
\end_layout

\begin_layout Standard
Las distribuciones de Linux son sistemas operativos basados en el kernel
 de Linux, que están compuestos por una combinación de software libre y
 de código abierto, como aplicaciones, controladores, herramientas de gestión
 de paquetes, etc.
\end_layout

\begin_layout Standard
Existen muchas distribuciones de Linux diferentes, como Debian, Ubuntu,
 Fedora, CentOS, Arch Linux, entre otras.
 Cada distribución tiene sus propias características, objetivos y filosofía,
 y están diseñadas para satisfacer las necesidades de diferentes usuarios
 y aplicaciones.
\end_layout

\begin_layout Standard
Las distribuciones de Linux existen porque el software de código abierto
 permite a los usuarios y desarrolladores acceder, modificar y distribuir
 el código fuente del software.
 Esto ha permitido que muchas personas y comunidades puedan desarrollar
 y distribuir sus propias versiones personalizadas de Linux.
 Además, al ser un sistema operativo altamente personalizable y adaptable,
 cada distribución puede estar diseñada para satisfacer las necesidades
 específicas de diferentes usuarios, como por ejemplo para usuarios de servidore
s, programadores, usuarios de escritorio, entre otros.
\end_layout

\begin_layout Standard
\begin_inset Flex Figura
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename distributions.png
	lyxscale 30
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
faLinux 
\backslash
;
\end_layout

\end_inset

Linea de tiempo de distribuciones de Linux
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Proceso de apagado
\end_layout

\begin_layout Standard
Antes de finalizar la ejecución del sistema operativo, se inicia un proceso
 que cierra todos los programas y servicios que se están ejecutando en la
 computadora.
 Luego, se guardan todos los datos pendientes y se asegura que todos los
 dispositivos de almacenamiento, como los discos duros o las unidades flash
 USB, estén en un estado seguro antes de apagar la alimentación.
 Finalmente, se envía una señal al hardware para que se apague por completo
 y se desconecte la alimentación en caso de ser necesario.
 
\end_layout

\begin_layout Standard
Hay varias opciones disponibles para 
\begin_inset Quotes fld
\end_inset

apagar
\begin_inset Quotes frd
\end_inset

 una computadora, cada una con diferentes efectos.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Description
Apagado Cuando se selecciona la opción de 
\begin_inset Quotes fld
\end_inset

apagar
\begin_inset Quotes frd
\end_inset

, la computadora cierra todos los programas y procesos en ejecución y se
 apaga completamente.
 La próxima vez que se encienda la computadora, se iniciará el proceso de
 arranque completo.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

shutdown
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PowerShell
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={solarized-dark}"
inline false
status open

\begin_layout Plain Layout

shutdown /s
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Description
Reinicio Al seleccionar la opción 
\begin_inset Quotes fld
\end_inset

reiniciar
\begin_inset Quotes frd
\end_inset

, la computadora cierra todos los programas y procesos en ejecución, se
 apaga brevemente y luego se reinicia automáticamente.
 Esta opción es útil para solucionar problemas de hardware o software y
 para actualizar el sistema operativo.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

reboot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PowerShell
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={solarized-dark}"
inline false
status open

\begin_layout Plain Layout

shutdown /r
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Description
Hibernación La opción de 
\begin_inset Quotes fld
\end_inset

hibernar
\begin_inset Quotes frd
\end_inset

 guarda todos los datos y configuraciones del sistema en el disco duro y
 luego apaga la computadora.
 Cuando se vuelve a encender la computadora, el sistema restaura automáticamente
 los datos y la configuración de la sesión anterior.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

systemctl hibernate
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PowerShell
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={solarized-dark}"
inline false
status open

\begin_layout Plain Layout

shutdown /h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Description
Suspensión La opción 
\begin_inset Quotes fld
\end_inset

suspender
\begin_inset Quotes frd
\end_inset

 pone la computadora en un estado de bajo consumo de energía, dejando alimentada
 solamente la memoria RAM.
 De esta manera los programas y procesos en ejecución se conservan y la
 computadora puede volver a su estado anterior cuando se reanude la actividad.
 Esta opción es útil para ahorrar energía y reanudar rápidamente el trabajo
 en curso.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex Bash
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=bash,style={github-dark}"
inline false
status open

\begin_layout Plain Layout

systemctl suspend
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Observacion
status open

\begin_layout Plain Layout
Si se llega a producir un corte en el suministro eléctrico, el estado de
 la computadora se pierde pues la RAM será incapaz de retener su información.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Chapter
Conceptos de programación
\end_layout

\begin_layout Chapter
Sistema de archivos
\end_layout

\begin_layout Part
Manejo de terminal
\end_layout

\begin_layout Section
Comandos básicos
\end_layout

\begin_layout Section
Shell scripting
\end_layout

\begin_layout Part
Conceptos adicionales
\end_layout

\begin_layout Section
Contenedores
\end_layout

\begin_layout Section
Control de versiones
\end_layout

\end_body
\end_document
